// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Storage.EFCore;

namespace Storage.Migrations.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190922172407_RemoveIsDeletedFromGroupsAndTeachers")]
    partial class RemoveIsDeletedFromGroupsAndTeachers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Schedule.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("GroupName")
                        .HasColumnName("group_name");

                    b.Property<long>("KpfuId")
                        .HasColumnName("kpfu_id");

                    b.Property<DateTime?>("Updated")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_groups");

                    b.HasIndex("GroupName")
                        .IsUnique()
                        .HasName("ix_groups_group_name");

                    b.HasIndex("Id")
                        .HasName("ix_groups_id");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("Schedule.Entities.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("BuildingId")
                        .HasColumnName("building_id");

                    b.Property<string>("BuildingName")
                        .HasColumnName("building_name");

                    b.Property<string>("CabinetNumber")
                        .HasColumnName("cabinet_number");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasDefaultValueSql("NOW()");

                    b.Property<int>("DayOfWeek")
                        .HasColumnName("day_of_week");

                    b.Property<DateTime?>("EndDay")
                        .HasColumnName("end_day");

                    b.Property<TimeSpan?>("EndTime")
                        .HasColumnName("end_time");

                    b.Property<long>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<string>("GroupName")
                        .HasColumnName("group_name");

                    b.Property<long>("KpfuId")
                        .HasColumnName("kpfu_id");

                    b.Property<string>("Name")
                        .HasColumnName("name");

                    b.Property<string>("Note")
                        .HasColumnName("note");

                    b.Property<DateTime?>("StartDay")
                        .HasColumnName("start_day");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnName("start_time");

                    b.Property<string>("SubjectKindName")
                        .HasColumnName("subject_kind_name");

                    b.Property<string>("TeacherFirstname")
                        .HasColumnName("teacher_firstname");

                    b.Property<long?>("TeacherId")
                        .HasColumnName("teacher_id");

                    b.Property<string>("TeacherLastname")
                        .HasColumnName("teacher_lastname");

                    b.Property<string>("TeacherMiddlename")
                        .HasColumnName("teacher_middlename");

                    b.Property<string>("TotalTime")
                        .HasColumnName("total_time");

                    b.Property<DateTime?>("Updated")
                        .HasColumnName("updated");

                    b.Property<int>("WeekType")
                        .HasColumnName("week_type");

                    b.HasKey("Id")
                        .HasName("pk_subjects");

                    b.HasIndex("GroupId")
                        .HasName("ix_subjects_group_id");

                    b.HasIndex("Id")
                        .HasName("ix_subjects_id");

                    b.ToTable("subjects");
                });

            modelBuilder.Entity("Schedule.Entities.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Firstname")
                        .HasColumnName("firstname");

                    b.Property<long>("KpfuId")
                        .HasColumnName("kpfu_id");

                    b.Property<string>("Lastname")
                        .HasColumnName("lastname");

                    b.Property<string>("Middlename")
                        .HasColumnName("middlename");

                    b.Property<DateTime?>("Updated")
                        .HasColumnName("updated");

                    b.HasKey("Id")
                        .HasName("pk_teachers");

                    b.HasIndex("Id")
                        .HasName("ix_teachers_id");

                    b.HasIndex("KpfuId")
                        .IsUnique()
                        .HasName("ix_teachers_kpfu_id");

                    b.ToTable("teachers");
                });

            modelBuilder.Entity("Schedule.Entities.VkUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<int>("ChatState")
                        .HasColumnName("chat_state");

                    b.Property<DateTime?>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("created")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnName("deleted");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name");

                    b.Property<long?>("GroupId")
                        .HasColumnName("group_id");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("is_deleted")
                        .HasDefaultValue(false);

                    b.Property<string>("LastName")
                        .HasColumnName("last_name");

                    b.Property<int>("ScheduleType")
                        .HasColumnName("schedule_type");

                    b.Property<DateTime?>("Updated")
                        .HasColumnName("updated");

                    b.Property<long>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_vk_users");

                    b.HasIndex("GroupId")
                        .HasName("ix_vk_users_group_id");

                    b.HasIndex("Id")
                        .HasName("ix_vk_users_id");

                    b.HasIndex("IsDeleted")
                        .HasName("ix_vk_users_is_deleted");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasName("ix_vk_users_user_id");

                    b.ToTable("vk_users");
                });

            modelBuilder.Entity("Schedule.Entities.Subject", b =>
                {
                    b.HasOne("Schedule.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_subjects_groups_group_id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Schedule.Entities.VkUser", b =>
                {
                    b.HasOne("Schedule.Entities.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .HasConstraintName("fk_vk_users_groups_group_id");
                });
#pragma warning restore 612, 618
        }
    }
}
